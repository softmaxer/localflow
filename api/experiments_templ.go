// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.648
package api

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func displayExperiments() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_displayExperiments_6859`,
		Function: `function __templ_displayExperiments_6859(){document.addEventListener('DOMContentLoaded', () => {
  fetch('/experiments/list')
    .then(response => response.json())
    .then(data => {
      const expList = document.getElementById('exp-container');
      for (let i = 0; i < data.length; i++) {
        let card1 = document.createElement('div');
        card1.className = "card";
        let cardHeader = document.createElement('div');
        cardHeader.className = "card-header";
        cardHeader.innerHTML = data[i]["id"];
        let cardBody = document.createElement('div');
        cardBody.className = "card-body";
        let cardtitle = document.createElement('h5');
        cardtitle.className = "card-title";
        cardtitle.innerHTML = data[i]["judge"];
        let cardText = document.createElement('p');
        cardText.className = "card-text";
        cardText.innerHTML = data[i]["prompt"];
        let cardLink = document.createElement('a');
        cardLink.className = "card-link ml-5";
        let linkText = document.createTextNode('Open');
        cardLink.appendChild(linkText)
        cardLink.title = "Open";
        cardLink.href = "/experiments/" + data[i]["id"] + "/open"
        cardBody.appendChild(cardtitle);
        cardBody.appendChild(cardText);
        card1.appendChild(cardHeader);
        card1.appendChild(cardBody);
        card1.appendChild(cardLink);

        expList.appendChild(card1)
      }
    })
    .catch(error => console.error('Error:', error));
});
}`,
		Call:       templ.SafeScript(`__templ_displayExperiments_6859`),
		CallInline: templ.SafeScriptInline(`__templ_displayExperiments_6859`),
	}
}

func addExpEventListener() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_addExpEventListener_1ad0`,
		Function: `function __templ_addExpEventListener_1ad0(){document.addEventListener('DOMContentLoaded', () => {
  document.getElementById('new-exp-form').addEventListener('submit', function(event) {
    event.preventDefault();
    const id = document.getElementById("id").value;
    const prompt = document.getElementById("prompt").value;
    const competitors = document.getElementById("competitors").value;
    const judge = document.getElementById("judge").value;
    let reqBody = JSON.stringify({"id": id, "prompt": prompt, "judge": judge, "competitors": competitors});
    let expList = document.getElementById('exp-container');
    fetch("/experiments/add", {method: 'POST', headers: {'Content-type': 'application/json'}, body: reqBody}).then(response => response.json()).then(data => {
        let card1 = document.createElement('div');
        card1.className = "card";
        let cardHeader = document.createElement('div');
        cardHeader.className = "card-header";
        cardHeader.innerHTML = data["id"];
        let cardBody = document.createElement('div');
        cardBody.className = "card-body";
        let cardtitle = document.createElement('h5');
        cardtitle.className = "card-title";
        cardtitle.innerHTML = data["judge"];
        let cardText = document.createElement('p');
        cardText.className = "card-text";
        cardText.innerHTML = data["prompt"];
        let cardLink = document.createElement('a');
        cardLink.className = "card-link ml-5";
        let linkText = document.createTextNode('Open');
        cardLink.appendChild(linkText)
        cardLink.title = "Open";
        cardLink.href = "/experiments/" + data["id"] + "/open"
        cardBody.appendChild(cardtitle);
        cardBody.appendChild(cardText);
        card1.appendChild(cardHeader);
        card1.appendChild(cardBody);
        card1.appendChild(cardLink);

        expList.appendChild(card1);
      }).catch(error => console.error('Error: ', error));
  });
  });
}`,
		Call:       templ.SafeScript(`__templ_addExpEventListener_1ad0`),
		CallInline: templ.SafeScriptInline(`__templ_addExpEventListener_1ad0`),
	}
}

func Experiments() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html><head><title>Localflow</title><style>\n\nheader {\n  display: flex;\n  justify-content: space-between;\n}\n\nnav ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n}\n\nli {\n    margin-right: 16px;\n}\n\n//a {\n//    color: #333;\n//    text-decoration: none;\n//}\n      </style><link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ\" crossorigin=\"anonymous\"><script src=\"https://unpkg.com/htmx.org@1.9.2\" integrity=\"sha384-L6OqL9pRWyyFU3+/bjdSri+iIphTN/bvYyM37tICVyOJkWZLpP2vGn6VUEXgzg6h\" crossorigin=\"anonymous\"></script><script src=\"https://unpkg.com/htmx.org@1.9.11/dist/ext/json-enc.js\"></script><script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = displayExperiments().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = addExpEventListener().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<header><nav class=\"navbar\"><ul><li class=\"nav-item\"><a class=\"nav-link\" href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 templ.SafeURL = templ.URL("/")
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var2)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">Home</a></li><li class=\"nav-item\"><a class=\"nav-link\" href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 templ.SafeURL = templ.URL("/experiments")
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var3)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">Experiments</a></li><li class=\"nav-item\"><a class=\"nav-link\" href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 templ.SafeURL = templ.URL("/")
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var4)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">Boards</a></li></ul></nav></header><div class=\"row mt-4 g-4\"><div class=\"col-8\" id=\"exp-list\"><h1 class=\"mb-4\">Experiments</h1><div class=\"exp-container\" id=\"exp-container\"></div></div><div class=\"col-4\"><h1 class=\"mb-4\">Start new experiment</h1><form id=\"new-exp-form\"><div class=\"mb-2\"><label for=\"id\">Name</label> <input type=\"text\" name=\"id\" id=\"id\" class=\"form-control\"></div><div class=\"mb-3\"><label for=\"prompt\">Prompt</label> <input type=\"textarea\" name=\"prompt\" id=\"prompt\" class=\"form-control\"></div><div class=\"mb-3\"><label for=\"competitors\">Competitors</label> <input type=\"textarea\" name=\"competitors\" id=\"competitors\" class=\"form-control\"></div><div class=\"mb-3\"><label for=\"judge\">Judge model</label> <input type=\"text\" name=\"judge\" id=\"judge\" class=\"form-control\"></div><button type=\"submit\" class=\"btn btn-dark\"><span class=\"spinner-border spinner-border-sm htmx-indicator\" id=\"spinner\" role=\"status\" aria-hidden=\"true\"></span> Add</button></form></div></div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
